seed <- 2019
set.seed(seed)
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Uniform.html
x1 <- runif(10, 1, 3)
x1
Y <- 0.5 + 1.2 * x1 - 0.2 * x2
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/GammaDist.html
x2 <- rgamma(draw, shape=3, scale=2)
seed <- 2019
draw <- 10
set.seed(seed)
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Uniform.html
x1 <- runif(draw, 1, 3)
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/GammaDist.html
x2 <- rgamma(draw, shape=3, scale=2)
Y <- 0.5 + 1.2 * x1 - 0.2 * x2
Y
# create Y <- 0.5 + 1.2 * x1 - 0.2 * x2 + 0.1 * x3 + eps
ydum <- ifelse(Y > mean(Y), 1, 0)
ydum
x1 <- runif(draw, 1, 3)
x1
x1 <- dunif(draw, 1, 3)
x1
x2
f <- function(x, y) sin(x) * cos(y)
y <- Deriv(f)
Deriv(f)
install.packages(“Deriv”)
install.packages("Deriv")
f_ <- Deriv(f)
fi <- Deriv(f)
fi <- deriv(f)
fi <- D(f)
D(f,fi)
D(f,"fi")
deriv(f,"fi")
f <- function(x) x^2
Deriv(f)
Dxy <- deriv( ~x*y*z, c('x', 'y'))
eval(Dxy)
x <- 2; y <- 3; z <- 4
eval(Dxy)
Dxy <- deriv( 3*x + 4, c('x'))
eval(Dxy)
Dxy <- deriv( ~x*y*z, c('x', 'y'))Dxy <- deri, 'y'))
dx2x <- deriv(~ x^2, "x") ; dx2x
eval(dx2x)
dx2x <- deriv(~ x^2, "x") ; dx2x
x<-3
eval(dx2x)
dx2x <- deriv(~ x^2, "x") ; dx2x
x<-c(1,2,3)
eval(dx2x)
dx2x <- deriv(~ x^2 + y^3, "x") ; dx2x
x<-c(1,2,3)
eval(dx2x)
dx2x <- deriv(~ x^2 + y^3, "x") ; dx2x
x<-c(1,2,3)
y <- 2
eval(dx2x)
matrix(rexp(200, rate=.1), ncol=20)
matrix(rnorm(6),2,3)
matrix(rnorm(8),2,3)
matrix(rnorm(6),2,3)
c(50000)
nchar(" GCTAAGGGCGATGAGGAGATCCCGGAGGCCTGACCT")
nchar("GCTAAGGGCGATGAGGAGATCCCGGAGGCCTGACCT")
nchar("CGTAAGCAGGAAAAGATTCC ")
nchar("AGGGCTCCATCTGCAACGTA")
nchar("GAAAGCCGGAAAGGTTTTACGCAACAGGAACTCAAGAAAGCCGTAAAGGTTTTAACGCAACAGGAACTCAAG")
nchar("
[0, ")
nchar("GAAAGCCGGAAAGGTTTTACGCAACATGAACTCAAG")
nchar("CAAACGACCTGCTGTTCCAGCTGTGACTGTGCTGGC")
#.libPaths( c( .libPaths(), "/data/gordanlab/vincentius/cooperative_probe/packages/Rlib") )
curwd <- "/Users/vincentiusmartin/Research/chip2gcPBM/chip2probe"
setwd(curwd)
source("R_analysis/chip.info/R/chipreader.R")
source("R_analysis/chip.info/R/bsite.R")
source("R_analysis/chip.info/R/plotter.R")
source("R_analysis/chip.info/R/site_finder.R")
#setwd("/Users/vincentiusmartin/Research/chip2gcPBM/src")
#curwd <- "/Users/vincentiusmartin/Research/chip2gcPBM/src"
pu1_path <- "../result/ets1_k562/macs_result/ets1_k562_r1_treat_pileup.bdg"
pu2_path <- "../result/ets1_k562/macs_result/ets1_k562_r2_treat_pileup.bdg"
pu_both_path <- "../result/ets1_k562/macs_result/ets1_k562_bothrs_treat_pileup.bdg"
nrwp_preidr_path <- "../result/ets1_k562/macs_result/ets1_k562_bothrs_peaks.narrowPeak"
nrwp_postidr_path <- "../result/ets1_k562/idr_result/idr_001p_wlist.005i"
bed_path <- "../imads_files/predictions/hg19_0005_Ets1_filtered.bed"
outpath <- "../result/ets1_k562/analysis_result"
chip_name <- "ets1_k562"
probe_size <- 36
probeseq_flank <- 10 # n to the left and n to the right
spans <- c(50,100,150)
count_sites_per_peak <- c(2,3,4)
min_bsite_dist <- 1
max_bsite_dist <- 24
sitefiles <- ""
for (span in spans){
for (ct in count_sites_per_peak){
sitefilename <- paste(outpath,"/sites_within_d",ct,"_span",span,".tsv",sep='')
sitefilepath <- paste(curwd,sitefilename,sep='/')
print(sitefilepath)
sitefiles <- ifelse(sitefiles == "",sitefilepath,paste(sitefiles,sitefilepath,sep="\n"))
}
}
print(sitefiles)
sitefiles <- ""
for (span in spans){
for (ct in count_sites_per_peak){
sitefilename <- paste(outpath,"/sites_within_d",ct,"_span",span,".tsv",sep='')
sitefilepath <- paste(curwd,sitefilename,sep='/')
print(sitefilepath)
sitefiles <- ifelse(sitefiles == "",sitefilepath,paste(sitefiles,sitefilepath,sep="\n"))
}
}
print(sitefiles)
# write all file with sequences to a file to enable parsing
write(sitefiles,file = paste(outpath,"/sitefiles_list.txt",sep=''))
outpath <- "../result/ets1_A549/analysis_result"
chip_name <- "ets1_A549"
sitefiles <- ""
for (span in spans){
for (ct in count_sites_per_peak){
sitefilename <- paste(outpath,"/sites_within_d",ct,"_span",span,".tsv",sep='')
sitefilepath <- paste(curwd,sitefilename,sep='/')
print(sitefilepath)
sitefiles <- ifelse(sitefiles == "",sitefilepath,paste(sitefiles,sitefilepath,sep="\n"))
}
}
print(sitefiles)
# write all file with sequences to a file to enable parsing
write(sitefiles,file = paste(outpath,"/sitefiles_list.txt",sep=''))
sitefiles <- ""
for (span in spans){
for (ct in count_sites_per_peak){
sitefilename <- paste(outpath,"/sites_within_d",ct,"_span",span,".tsv",sep='')
sitefilepath <- paste(curwd,sitefilename,sep='/')
print(sitefilepath)
sitefiles <- ifelse(sitefiles == "",sitefilepath,paste(sitefiles,sitefilepath,sep="\n"))
}
}
print(sitefiles)
# write all file with sequences to a file to enable parsing
write(sitefiles,file = paste(outpath,"/sitefiles_list.txt",sep=''))
nchar("CGGGTCGGAAATGGTGGTCACGAGCGCTTCCGGGTC")
curwd <- "/Users/vincentiusmartin/Research/chip2gcPBM/chip2probe"
setwd(curwd)
source("R_analysis/chip.info/R/chipreader.R")
source("R_analysis/chip.info/R/bsite.R")
source("R_analysis/chip.info/R/plotter.R")
source("R_analysis/chip.info/R/site_finder.R")
nrwp_path <- "../result/additionals/GSM1252929_ETS1_peaks.bed"
nrwp <- read.narrow.peak(nrwp_path)
nrwp <- read.table(nrwp_path)
nrwp <- read.table(nrwp_path)
nrwp_path <- "../result/cistrome/37927_peaks.bed"
nrwp <- read.table(nrwp_path)
nrwp
(4 +5) // 2
(4 +5) / 2
(4 +5) %/% 2
read.cistrome.peak <- function(filepath, span = -1){
df <- read.table(nrwp_path)[ , c("V1", "V2", "V3", "V5")]
colnames(df) <- c("chr","start","end","intensity")
if(span != -1){
# update start and end to use peak center, if span != -1
peak_center <- (df$start + df$end) %/% 2 # integer division
df$start <- peak_center - span
df$end <- peak_center + span
}
setDT(nrwp, key = names(nrwp))
setkey(nrwp, "chr", "start","end")
return(nrwp)
}
nrwp <- read.table(nrwp_path)
nrwp
nrwp <- read.cistrome.peak(nrwp_path)
read.cistrome.peak <- function(filepath, span = -1){
df <- read.table(nrwp_path)[ , c("V1", "V2", "V3", "V5")]
colnames(df) <- c("chr","start","end","intensity")
if(span != -1){
# update start and end to use peak center, if span != -1
peak_center <- (df$start + df$end) %/% 2 # integer division
df$start <- peak_center - span
df$end <- peak_center + span
}
setDT(nrwp, key = names(nrwp))
setkey(nrwp, "chr", "start","end")
return(nrwp)
}
nrwp <- read.cistrome.peak(nrwp_path)
read.cistrome.peak <- function(filepath, span = -1){
df <- read.table(nrwp_path)[ , c("V1", "V2", "V3", "V5")]
colnames(df) <- c("chr","start","end","intensity")
df
if(span != -1){
# update start and end to use peak center, if span != -1
peak_center <- (df$start + df$end) %/% 2 # integer division
df$start <- peak_center - span
df$end <- peak_center + span
}
setDT(nrwp, key = names(nrwp))
setkey(nrwp, "chr", "start","end")
return(nrwp)
}
nrwp <- read.cistrome.peak(nrwp_path)
nrwp
read.cistrome.peak <- function(filepath, span = -1){
df <- read.table(nrwp_path)[ , c("V1", "V2", "V3", "V5")]
colnames(df) <- c("chr","start","end","intensity")
print(df)
if(span != -1){
# update start and end to use peak center, if span != -1
peak_center <- (df$start + df$end) %/% 2 # integer division
df$start <- peak_center - span
df$end <- peak_center + span
}
setDT(nrwp, key = names(nrwp))
setkey(nrwp, "chr", "start","end")
return(nrwp)
}
nrwp <- read.cistrome.peak(nrwp_path)
nrwp
df
